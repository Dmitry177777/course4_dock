version: "3"

services:

  # описание действий с базой данных
  db:
    image: postgres:16.8
#    restart: on-failure
    # передача всех переменных окружения в контейнерн (должны быть правильно поименованы в проекте)
    env_file:
     - .env

    # вручную прописываюся переменные со ссылкой на действующее окружение (.env)
#    environment:
#      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
#      POSTGRES_USER: $POSTGRES_USER
#      POSTGRES_NAME: $POSTGRES_NAME

    # expose определяет порты без публикации на хост-машине — доступны только для связанных служб.
    expose:
      - "5432"


    volumes:
      - db-data:/var/lib/postgresql/data

    # проверка на корректный запуск контейнера с условием проверки
    healthcheck:
      test: ["CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      retries: 5
      timeout: 5s

  # описание действий с приложением
  app:
    # наименование образа не обязательное, т.к. он не скачивается из репазитория а собирается в проекте
    #image: app

    # собрание образа на основании Dockerfile из папки в которой находится файл docker-compose
    build: .

    # tty определяет интерактивный режим
    tty: true

    # пробрасываем порты из контейнера в хост (доступ к приложению)
    ports:
      - "8000:8000"

    # команда для запуска приложения
    command: sh -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"

    # проверка на успешный запуск db приложение запустится только после успешно сформированной базы данных
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app

volumes:
  db-data:



